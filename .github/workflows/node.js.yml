 # This workflow performs a full CI/CD pipeline for your Expense Tracker application.
# It includes building, testing, containerizing, pushing to Docker Hub,
# and deploying to Kubernetes using a self-hosted GitHub Actions runner.

name: Expense Tracker CI/CD

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger on pull requests to the main branch (for CI checks)

jobs:
  build-and-push:
    # Use your self-hosted runner. Ensure it's online and has 'docker' and 'kubectl' installed.
    # If you gave your runner specific labels, add them here (e.g., 'my-ubuntu-runner').
    runs-on: [self-hosted, linux, x64] # CORRECT: Uses your self-hosted runner

    outputs: # Define outputs to pass dynamic tags to the deploy job
      sha_short: ${{ steps.get_sha.outputs.sha_short }}
      # github.run_number is automatically available in subsequent jobs

    env: # Environment variables for this job
      DOCKER_USERNAME_VAR: ${{ secrets.DOCKER_USERNAME }} # Using a different var name to avoid conflict with `docker/login-action` implicit env
      FRONTEND_IMAGE_NAME: expense-tracker-frontend
      BACKEND_IMAGE_NAME: expense-tracker-backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # -----------------------------------------------------------
    # CI Stages (Build & Test - for both frontend and backend)
    # These steps are CRITICAL for building and testing your application.
    # -----------------------------------------------------------

    - name: Set up Node.js 18.x for Backend
      uses: actions/setup-node@v4
      with:
        node-version: 18.x # Consistent Node.js LTS version
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    - name: Install Backend Dependencies
      run: npm ci
      working-directory: backend

    - name: Run Backend Tests
      run: npm test
      working-directory: backend

    - name: Set up Node.js 18.x for Frontend
      uses: actions/setup-node@v4
      with:
        node-version: 18.x # Consistent Node.js LTS version
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    - name: Install Frontend Dependencies
      run: npm ci
      working-directory: frontend

    - name: Run Frontend Tests
      run: npm test
      working-directory: frontend

    - name: Build Frontend Application
      run: npm run build
      working-directory: frontend

    # -----------------------------------------------------------
    # Docker Stages (Build & Push) - Uses the Docker daemon on the self-hosted runner
    # -----------------------------------------------------------

    - name: Set up Docker BuildX
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }} # Uses secret directly
        password: ${{ secrets.DOCKER_PASSWORD }} # Uses secret directly

    - name: Get short SHA for tagging
      id: get_sha # ID for accessing outputs. Renamed from 'vars' to be more descriptive.
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT # CORRECTED: Uses GITHUB_OUTPUT

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend # Path to your backend's Dockerfile context
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.run_number }}-${{ steps.get_sha.outputs.sha_short }}
          ${{ secrets.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest
        cache-from: type=gha,scope=backend-build
        cache-to: type=gha,mode=max,scope=backend-build

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend # Path to your frontend's Dockerfile context
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.run_number }}-${{ steps.get_sha.outputs.sha_short }}
          ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
        cache-from: type=gha,scope=frontend-build
        cache-to: type=gha,mode=max,scope=frontend-build

  deploy:
    needs: build-and-push # This job runs only after build-and-push completes successfully
    runs-on: [self-hosted, linux, x64] # CORRECT: Deploy job also runs on self-hosted runner

    env: # Environment variables for this job
      DOCKER_USERNAME_VAR: ${{ secrets.DOCKER_USERNAME }}
      BACKEND_IMAGE_NAME: expense-tracker-backend
      FRONTEND_IMAGE_NAME: expense-tracker-frontend
      KUBERNETES_NAMESPACE: expense-tracker # Must match your namespace.yaml

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # -----------------------------------------------------------
    # CD Stages (Deploy to Kubernetes) - Uses kubectl on the self-hosted runner
    # -----------------------------------------------------------

    - name: Set up Kubeconfig for kubectl
      uses: kubernetes-action/kubeconfig@main # CORRECT: Uses the secure action
      with:
        kubeconfig: ${{ secrets.KUBECONFIG_BASE64 }} # Uses the base64 encoded secret

    - name: Verify kubectl access (optional, for debugging)
      run: kubectl get nodes

    - name: Apply Kubernetes Namespace
      run: kubectl apply -f kubernetes/namespace.yaml # Apply the namespace first

    - name: Apply Backend Kubernetes Manifests
      run: |
        kubectl apply -f kubernetes/backend-deployment.yaml
        kubectl apply -f kubernetes/backend-service.yaml
      working-directory: kubernetes # Run kubectl from the kubernetes directory

    - name: Update Backend Deployment Image
      run: |
        kubectl set image deployment/${{ env.BACKEND_IMAGE_NAME }} \
          backend=${{ env.DOCKER_USERNAME_VAR }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.run_number }}-${{ needs.build-and-push.outputs.sha_short }} \
          -n ${{ env.KUBERNETES_NAMESPACE }}
      # Ensure 'backend=' matches the 'name' of the container in your backend-deployment.yaml

    - name: Apply Frontend Kubernetes Manifests
      run: |
        kubectl apply -f kubernetes/frontend-deployment.yaml
        kubectl apply -f kubernetes/frontend-service.yaml
      working-directory: kubernetes

    - name: Update Frontend Deployment Image
      run: |
        kubectl set image deployment/${{ env.FRONTEND_IMAGE_NAME }} \
          frontend=${{ env.DOCKER_USERNAME_VAR }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.run_number }}-${{ needs.build-and-push.outputs.sha_short }} \
          -n ${{ env.KUBERNETES_NAMESPACE }}
      # Ensure 'frontend=' matches the 'name' of the container in your frontend-deployment.yaml

    - name: Rollout Status Check (optional)
      run: |
        kubectl rollout status deployment/${{ env.BACKEND_IMAGE_NAME }} -n ${{ env.KUBERNETES_NAMESPACE }}
        kubectl rollout status deployment/${{ env.FRONTEND_IMAGE_NAME }} -n ${{ env.KUBERNETES_NAMESPACE }}
