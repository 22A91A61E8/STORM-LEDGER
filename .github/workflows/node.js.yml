# This workflow extends the Node.js CI to include Docker build, push, and Kubernetes deployment.
# It assumes your frontend is a React app (served by Nginx) and backend is a Node.js app.

name: CI/CD Pipeline to Kubernetes

on:
  push:
    branches: [ "main" ] # Triggers on pushes to the main branch
  pull_request:
    branches: [ "main" ] # Triggers on pull requests targeting the main branch

jobs:
  build-and-deploy: # Changed job name to reflect both CI and CD aspects

    runs-on: ubuntu-latest # GitHub-hosted runner. It comes with Docker and kubectl pre-installed.

    env: # Environment variables for the entire job
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_HUB_REPO_PREFIX: ${{ secrets.DOCKER_USERNAME }} # Your Docker Hub username
      FRONTEND_IMAGE_NAME: expense-tracker-frontend
      BACKEND_IMAGE_NAME: expense-tracker-backend
      KUBERNETES_NAMESPACE: expense-tracker # Must match your namespace.yaml

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Action to checkout your repository code

    # -----------------------------------------------------------
    # CI Stages (Build & Test - for both frontend and backend)
    # -----------------------------------------------------------

    - name: Set up Node.js 18.x for Backend
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json' # Cache dependencies specific to backend
    - name: Install Backend Dependencies
      run: npm ci
      working-directory: backend # Run commands in the backend directory

    - name: Run Backend Tests
      run: npm test
      working-directory: backend # Run commands in the backend directory

    - name: Set up Node.js 18.x for Frontend
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json' # Cache dependencies specific to frontend
    - name: Install Frontend Dependencies
      run: npm ci
      working-directory: frontend # Run commands in the frontend directory

    - name: Run Frontend Tests
      run: npm test
      working-directory: frontend # Run commands in the frontend directory

    - name: Build Frontend Application
      run: npm run build
      working-directory: frontend # Run commands in the frontend directory
      # This step will generate the static assets (e.g., in 'frontend/dist')

    # -----------------------------------------------------------
    # Docker Stages (Build & Push)
    # -----------------------------------------------------------

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }} # Use the GitHub Secret for password

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend # Path to your backend's Dockerfile context
        push: true
        tags: |
          ${{ env.DOCKER_HUB_REPO_PREFIX }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.run_number }}
          ${{ env.DOCKER_HUB_REPO_PREFIX }}/${{ env.BACKEND_IMAGE_NAME }}:latest
        build-args: | # Pass build args if your Dockerfile needs them
          # For example: NODE_ENV=production
        cache-from: type=gha,scope=backend-build
        cache-to: type=gha,mode=max,scope=backend-build

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend # Path to your frontend's Dockerfile context
        push: true
        tags: |
          ${{ env.DOCKER_HUB_REPO_PREFIX }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.run_number }}
          ${{ env.DOCKER_HUB_REPO_PREFIX }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
        build-args: |
          # For example: REACT_APP_API_URL=http://your-prod-api.com
        cache-from: type=gha,scope=frontend-build
        cache-to: type=gha,mode=max,scope=frontend-build

    # -----------------------------------------------------------
    # CD Stages (Deploy to Kubernetes)
    # -----------------------------------------------------------

    - name: Set up Kubeconfig for kubectl
      uses: kubernetes-action/kubeconfig@main # Action to set up kubeconfig securely
      with:
        kubeconfig: ${{ secrets.KUBECONFIG_BASE64 }} # Use the base64 encoded secret

    - name: Verify kubectl access (optional, for debugging)
      run: kubectl get nodes

    - name: Apply Kubernetes Namespace
      run: kubectl apply -f kubernetes/namespace.yaml

    - name: Update Backend Deployment in Kubernetes
      run: |
        kubectl set image deployment/${{ env.BACKEND_IMAGE_NAME }} \
          backend=${{ env.DOCKER_HUB_REPO_PREFIX }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.run_number }} \
          -n ${{ env.KUBERNETES_NAMESPACE }}
      working-directory: kubernetes # Ensure kubectl runs from the context of your kubernetes folder if needed,
                                   # though `kubectl set image` doesn't strictly need it.

    - name: Update Frontend Deployment in Kubernetes
      run: |
        kubectl set image deployment/${{ env.FRONTEND_IMAGE_NAME }} \
          frontend=${{ env.DOCKER_HUB_REPO_PREFIX }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.run_number }} \
          -n ${{ env.KUBERNETES_NAMESPACE }}
      working-directory: kubernetes

    - name: Rollout Status Check (optional)
      run: |
        kubectl rollout status deployment/${{ env.BACKEND_IMAGE_NAME }} -n ${{ env.KUBERNETES_NAMESPACE }}
        kubectl rollout status deployment/${{ env.FRONTEND_IMAGE_NAME }} -n ${{ env.KUBERNETES_NAMESPACE }}
